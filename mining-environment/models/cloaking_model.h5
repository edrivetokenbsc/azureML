import tensorflow as tf
from tensorflow.keras import layers, models, regularizers

# Định nghĩa kích thước input dựa trên dữ liệu của bạn
input_shape = 50  # Thay đổi giá trị này theo số lượng đặc trưng của dữ liệu

# Định nghĩa kiến trúc mô hình Autoencoder với các tối ưu hóa
model = models.Sequential()

# Encoder
model.add(layers.Input(shape=(input_shape,)))  # Thay đổi input_shape theo dữ liệu của bạn
model.add(layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(1e-5)))
model.add(layers.BatchNormalization())
model.add(layers.Dropout(0.2))
model.add(layers.Dense(64, activation='relu', kernel_regularizer=regularizers.l2(1e-5)))
model.add(layers.BatchNormalization())
model.add(layers.Dropout(0.2))
model.add(layers.Dense(32, activation='relu', kernel_regularizer=regularizers.l2(1e-5)))

# Latent Space
model.add(layers.Dense(16, activation='relu', kernel_regularizer=regularizers.l2(1e-5)))

# Decoder
model.add(layers.Dense(32, activation='relu', kernel_regularizer=regularizers.l2(1e-5)))
model.add(layers.BatchNormalization())
model.add(layers.Dropout(0.2))
model.add(layers.Dense(64, activation='relu', kernel_regularizer=regularizers.l2(1e-5)))
model.add(layers.BatchNormalization())
model.add(layers.Dropout(0.2))
model.add(layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(1e-5)))
model.add(layers.BatchNormalization())
model.add(layers.Dropout(0.2))
model.add(layers.Dense(input_shape, activation='sigmoid'))  # Hoặc 'linear' tùy thuộc vào dữ liệu

# Biên dịch mô hình với các tham số học tập tối ưu
optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='mse', metrics=['mae'])

# Tóm tắt kiến trúc mô hình
model.summary()

# Lưu mô hình
model.save('cloaking_model.h5')
